// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROPERTY_PROPERTYTREE_H_
#define FLATBUFFERS_GENERATED_PROPERTY_PROPERTYTREE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 9,
             "Non-compatible flatbuffers version included");

namespace PropertyTree {

struct PropertyValue;
struct PropertyValueBuilder;
struct PropertyValueT;

struct Property;
struct PropertyBuilder;
struct PropertyT;

enum Type : int8_t {
  Type_INT = 0,
  Type_FLOAT = 1,
  Type_STRING = 2,
  Type_BOOL = 3,
  Type_MIN = Type_INT,
  Type_MAX = Type_BOOL
};

inline const Type (&EnumValuesType())[4] {
  static const Type values[] = {
    Type_INT,
    Type_FLOAT,
    Type_STRING,
    Type_BOOL
  };
  return values;
}

inline const char * const *EnumNamesType() {
  static const char * const names[5] = {
    "INT",
    "FLOAT",
    "STRING",
    "BOOL",
    nullptr
  };
  return names;
}

inline const char *EnumNameType(Type e) {
  if (::flatbuffers::IsOutRange(e, Type_INT, Type_BOOL)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesType()[index];
}

struct PropertyValueT : public ::flatbuffers::NativeTable {
  typedef PropertyValue TableType;
  int32_t int_value = 0;
  float float_value = 0.0f;
  std::string string_value{};
  bool bool_value = false;
};

struct PropertyValue FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PropertyValueT NativeTableType;
  typedef PropertyValueBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INT_VALUE = 4,
    VT_FLOAT_VALUE = 6,
    VT_STRING_VALUE = 8,
    VT_BOOL_VALUE = 10
  };
  int32_t int_value() const {
    return GetField<int32_t>(VT_INT_VALUE, 0);
  }
  bool mutate_int_value(int32_t _int_value = 0) {
    return SetField<int32_t>(VT_INT_VALUE, _int_value, 0);
  }
  float float_value() const {
    return GetField<float>(VT_FLOAT_VALUE, 0.0f);
  }
  bool mutate_float_value(float _float_value = 0.0f) {
    return SetField<float>(VT_FLOAT_VALUE, _float_value, 0.0f);
  }
  const ::flatbuffers::String *string_value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STRING_VALUE);
  }
  ::flatbuffers::String *mutable_string_value() {
    return GetPointer<::flatbuffers::String *>(VT_STRING_VALUE);
  }
  bool bool_value() const {
    return GetField<uint8_t>(VT_BOOL_VALUE, 0) != 0;
  }
  bool mutate_bool_value(bool _bool_value = 0) {
    return SetField<uint8_t>(VT_BOOL_VALUE, static_cast<uint8_t>(_bool_value), 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_INT_VALUE, 4) &&
           VerifyField<float>(verifier, VT_FLOAT_VALUE, 4) &&
           VerifyOffset(verifier, VT_STRING_VALUE) &&
           verifier.VerifyString(string_value()) &&
           VerifyField<uint8_t>(verifier, VT_BOOL_VALUE, 1) &&
           verifier.EndTable();
  }
  PropertyValueT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PropertyValueT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<PropertyValue> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PropertyValueT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PropertyValueBuilder {
  typedef PropertyValue Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_int_value(int32_t int_value) {
    fbb_.AddElement<int32_t>(PropertyValue::VT_INT_VALUE, int_value, 0);
  }
  void add_float_value(float float_value) {
    fbb_.AddElement<float>(PropertyValue::VT_FLOAT_VALUE, float_value, 0.0f);
  }
  void add_string_value(::flatbuffers::Offset<::flatbuffers::String> string_value) {
    fbb_.AddOffset(PropertyValue::VT_STRING_VALUE, string_value);
  }
  void add_bool_value(bool bool_value) {
    fbb_.AddElement<uint8_t>(PropertyValue::VT_BOOL_VALUE, static_cast<uint8_t>(bool_value), 0);
  }
  explicit PropertyValueBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PropertyValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PropertyValue>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PropertyValue> CreatePropertyValue(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t int_value = 0,
    float float_value = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> string_value = 0,
    bool bool_value = false) {
  PropertyValueBuilder builder_(_fbb);
  builder_.add_string_value(string_value);
  builder_.add_float_value(float_value);
  builder_.add_int_value(int_value);
  builder_.add_bool_value(bool_value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PropertyValue> CreatePropertyValueDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t int_value = 0,
    float float_value = 0.0f,
    const char *string_value = nullptr,
    bool bool_value = false) {
  auto string_value__ = string_value ? _fbb.CreateString(string_value) : 0;
  return PropertyTree::CreatePropertyValue(
      _fbb,
      int_value,
      float_value,
      string_value__,
      bool_value);
}

::flatbuffers::Offset<PropertyValue> CreatePropertyValue(::flatbuffers::FlatBufferBuilder &_fbb, const PropertyValueT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PropertyT : public ::flatbuffers::NativeTable {
  typedef Property TableType;
  std::string name{};
  PropertyTree::Type type = PropertyTree::Type_INT;
  std::unique_ptr<PropertyTree::PropertyValueT> value{};
  std::vector<std::unique_ptr<PropertyTree::PropertyT>> sub_properties{};
  PropertyT() = default;
  PropertyT(const PropertyT &o);
  PropertyT(PropertyT&&) FLATBUFFERS_NOEXCEPT = default;
  PropertyT &operator=(PropertyT o) FLATBUFFERS_NOEXCEPT;
};

struct Property FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PropertyT NativeTableType;
  typedef PropertyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPE = 6,
    VT_VALUE = 8,
    VT_SUB_PROPERTIES = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  PropertyTree::Type type() const {
    return static_cast<PropertyTree::Type>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool mutate_type(PropertyTree::Type _type = static_cast<PropertyTree::Type>(0)) {
    return SetField<int8_t>(VT_TYPE, static_cast<int8_t>(_type), 0);
  }
  const PropertyTree::PropertyValue *value() const {
    return GetPointer<const PropertyTree::PropertyValue *>(VT_VALUE);
  }
  PropertyTree::PropertyValue *mutable_value() {
    return GetPointer<PropertyTree::PropertyValue *>(VT_VALUE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<PropertyTree::Property>> *sub_properties() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<PropertyTree::Property>> *>(VT_SUB_PROPERTIES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<PropertyTree::Property>> *mutable_sub_properties() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<PropertyTree::Property>> *>(VT_SUB_PROPERTIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyTable(value()) &&
           VerifyOffset(verifier, VT_SUB_PROPERTIES) &&
           verifier.VerifyVector(sub_properties()) &&
           verifier.VerifyVectorOfTables(sub_properties()) &&
           verifier.EndTable();
  }
  PropertyT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PropertyT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Property> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PropertyT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PropertyBuilder {
  typedef Property Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Property::VT_NAME, name);
  }
  void add_type(PropertyTree::Type type) {
    fbb_.AddElement<int8_t>(Property::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_value(::flatbuffers::Offset<PropertyTree::PropertyValue> value) {
    fbb_.AddOffset(Property::VT_VALUE, value);
  }
  void add_sub_properties(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PropertyTree::Property>>> sub_properties) {
    fbb_.AddOffset(Property::VT_SUB_PROPERTIES, sub_properties);
  }
  explicit PropertyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Property> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Property>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Property> CreateProperty(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    PropertyTree::Type type = PropertyTree::Type_INT,
    ::flatbuffers::Offset<PropertyTree::PropertyValue> value = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PropertyTree::Property>>> sub_properties = 0) {
  PropertyBuilder builder_(_fbb);
  builder_.add_sub_properties(sub_properties);
  builder_.add_value(value);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Property> CreatePropertyDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    PropertyTree::Type type = PropertyTree::Type_INT,
    ::flatbuffers::Offset<PropertyTree::PropertyValue> value = 0,
    const std::vector<::flatbuffers::Offset<PropertyTree::Property>> *sub_properties = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto sub_properties__ = sub_properties ? _fbb.CreateVector<::flatbuffers::Offset<PropertyTree::Property>>(*sub_properties) : 0;
  return PropertyTree::CreateProperty(
      _fbb,
      name__,
      type,
      value,
      sub_properties__);
}

::flatbuffers::Offset<Property> CreateProperty(::flatbuffers::FlatBufferBuilder &_fbb, const PropertyT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PropertyValueT *PropertyValue::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PropertyValueT>(new PropertyValueT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PropertyValue::UnPackTo(PropertyValueT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = int_value(); _o->int_value = _e; }
  { auto _e = float_value(); _o->float_value = _e; }
  { auto _e = string_value(); if (_e) _o->string_value = _e->str(); }
  { auto _e = bool_value(); _o->bool_value = _e; }
}

inline ::flatbuffers::Offset<PropertyValue> PropertyValue::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PropertyValueT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePropertyValue(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<PropertyValue> CreatePropertyValue(::flatbuffers::FlatBufferBuilder &_fbb, const PropertyValueT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const PropertyValueT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _int_value = _o->int_value;
  auto _float_value = _o->float_value;
  auto _string_value = _o->string_value.empty() ? 0 : _fbb.CreateString(_o->string_value);
  auto _bool_value = _o->bool_value;
  return PropertyTree::CreatePropertyValue(
      _fbb,
      _int_value,
      _float_value,
      _string_value,
      _bool_value);
}

inline PropertyT::PropertyT(const PropertyT &o)
      : name(o.name),
        type(o.type),
        value((o.value) ? new PropertyTree::PropertyValueT(*o.value) : nullptr) {
  sub_properties.reserve(o.sub_properties.size());
  for (const auto &sub_properties_ : o.sub_properties) { sub_properties.emplace_back((sub_properties_) ? new PropertyTree::PropertyT(*sub_properties_) : nullptr); }
}

inline PropertyT &PropertyT::operator=(PropertyT o) FLATBUFFERS_NOEXCEPT {
  std::swap(name, o.name);
  std::swap(type, o.type);
  std::swap(value, o.value);
  std::swap(sub_properties, o.sub_properties);
  return *this;
}

inline PropertyT *Property::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PropertyT>(new PropertyT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Property::UnPackTo(PropertyT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = type(); _o->type = _e; }
  { auto _e = value(); if (_e) { if(_o->value) { _e->UnPackTo(_o->value.get(), _resolver); } else { _o->value = std::unique_ptr<PropertyTree::PropertyValueT>(_e->UnPack(_resolver)); } } else if (_o->value) { _o->value.reset(); } }
  { auto _e = sub_properties(); if (_e) { _o->sub_properties.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->sub_properties[_i]) { _e->Get(_i)->UnPackTo(_o->sub_properties[_i].get(), _resolver); } else { _o->sub_properties[_i] = std::unique_ptr<PropertyTree::PropertyT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->sub_properties.resize(0); } }
}

inline ::flatbuffers::Offset<Property> Property::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PropertyT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateProperty(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Property> CreateProperty(::flatbuffers::FlatBufferBuilder &_fbb, const PropertyT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const PropertyT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _type = _o->type;
  auto _value = _o->value ? CreatePropertyValue(_fbb, _o->value.get(), _rehasher) : 0;
  auto _sub_properties = _o->sub_properties.size() ? _fbb.CreateVector<::flatbuffers::Offset<PropertyTree::Property>> (_o->sub_properties.size(), [](size_t i, _VectorArgs *__va) { return CreateProperty(*__va->__fbb, __va->__o->sub_properties[i].get(), __va->__rehasher); }, &_va ) : 0;
  return PropertyTree::CreateProperty(
      _fbb,
      _name,
      _type,
      _value,
      _sub_properties);
}

inline const PropertyTree::Property *GetProperty(const void *buf) {
  return ::flatbuffers::GetRoot<PropertyTree::Property>(buf);
}

inline const PropertyTree::Property *GetSizePrefixedProperty(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PropertyTree::Property>(buf);
}

inline Property *GetMutableProperty(void *buf) {
  return ::flatbuffers::GetMutableRoot<Property>(buf);
}

inline PropertyTree::Property *GetMutableSizePrefixedProperty(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<PropertyTree::Property>(buf);
}

inline bool VerifyPropertyBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PropertyTree::Property>(nullptr);
}

inline bool VerifySizePrefixedPropertyBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PropertyTree::Property>(nullptr);
}

inline void FinishPropertyBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PropertyTree::Property> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPropertyBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PropertyTree::Property> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<PropertyTree::PropertyT> UnPackProperty(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<PropertyTree::PropertyT>(GetProperty(buf)->UnPack(res));
}

inline std::unique_ptr<PropertyTree::PropertyT> UnPackSizePrefixedProperty(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<PropertyTree::PropertyT>(GetSizePrefixedProperty(buf)->UnPack(res));
}

}  // namespace PropertyTree

#endif  // FLATBUFFERS_GENERATED_PROPERTY_PROPERTYTREE_H_
